/*
# 老板的作息表
 - 链接：https://pintia.cn/problem-sets/1674039732562952192/exam/problems/1674039795301347335
 - 代码长度限制：16 KB
 - 时间限制：200 ms
 - 内存限制：65536 MB

# 题目描述


![zcy.png](https://images.ptausercontent.com/f4125c83-7ab2-4e3f-bc52-048a723803ee.png)

新浪微博上有人发了某老板的作息时间表，表示其每天 4:30 就起床了。但立刻有眼尖的网友问：这时间表不完整啊，早上九点到下午一点干啥了？

本题就请你编写程序，检查任意一张时间表，找出其中没写出来的时间段。

## 输入格式：

输入第一行给出一个正整数 $N$，为作息表上列出的时间段的个数。随后 $N$ 行，每行给出一个时间段，格式为：

```
hh:mm:ss - hh:mm:ss
```
其中 `hh`、`mm`、`ss` 分别是两位数表示的小时、分钟、秒。第一个时间是开始时间，第二个是结束时间。题目保证所有时间都在一天之内（即从 00:00:00 到 23:59:59）；每个区间间隔至少 1 秒；并且任意两个给出的时间区间最多只在一个端点有重合，没有区间重叠的情况。

## 输出格式：

按照时间顺序列出时间表中没有出现的区间，每个区间占一行，格式与输入相同。题目保证至少存在一个区间需要输出。

## 输入样例：
```in
8
13:00:00 - 18:00:00
00:00:00 - 01:00:05
08:00:00 - 09:00:00
07:10:59 - 08:00:00
01:00:05 - 04:30:00
06:30:00 - 07:10:58
05:30:00 - 06:30:00
18:00:00 - 19:00:00
```

## 输出样例：
```out
04:30:00 - 05:30:00
07:10:58 - 07:10:59
09:00:00 - 13:00:00
19:00:00 - 23:59:59
```
*/

#include <iostream>

using namespace std;

int q[24][60][60];

int main()
{
    int n;
    cin >> n;
    while (n--)
    {
        int h1, m1, s1, h2, m2, s2;
        scanf("%d:%d:%d - %d:%d:%d", &h1, &m1, &s1, &h2, &m2, &s2);
        int start = h1 * 3600 + m1 * 60 + s1;
        int end = h2 * 3600 + m2 * 60 + s2;
        for (int i = start; i < end; i++)
            q[i / 3600][i % 3600 / 60][i % 60] = 1;
    }

    int start = 0, end = 0;
    while (start < 24 * 60 * 60)
    {
        while (start < 24 * 60 * 60 && q[start / 3600][start % 3600 / 60][start % 60] == 1)
            start++;
        end = start + 1;
        while (end < 24 * 60 * 60 && q[end / 3600][end % 3600 / 60][end % 60] == 0)
            end++;
        // start ~ end
        if (end == 24 * 60 * 60 && start != end - 1)
            printf("%02d:%02d:%02d - %02d:%02d:%02d\n", start / 3600, start % 3600 / 60, start % 60, 23, 59, 59);
        else if (start < 24 * 60 * 60 && end != 24 * 60 * 60)
            printf("%02d:%02d:%02d - %02d:%02d:%02d\n", start / 3600, start % 3600 / 60, start % 60, end / 3600, end % 3600 / 60, end % 60);
        start = end + 1;
    }
}

/*
TEST CASE

1
19:00:00 - 23:59:59

00:00:00 - 19:00:00
*/